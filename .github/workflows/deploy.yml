name: Deploy

on:
  push:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy to staging environment
        run: |
          echo "üöÄ Deploying to staging environment..."
          vercel --yes --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Comment deployment URL
        uses: actions/github-script@v7
        if: github.event_name == 'push'
        with:
          script: |
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'staging'
            });

            if (deployments.length > 0) {
              const deployment = deployments[0];
              const { data: statuses } = await github.rest.repos.listDeploymentStatuses({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id
              });
              
              if (statuses.length > 0) {
                const status = statuses[0];
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `üéâ **Staging Deployment Successful!**\n\n**Environment:** Staging\n**URL:** ${status.target_url}\n**Status:** ${status.state}\n**Deployed at:** ${status.created_at}`
                });
              }
            }

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy to production environment
        run: |
          echo "üöÄ Deploying to production environment..."
          vercel --prod --yes --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Create release
        uses: actions/create-release@v1
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            üéâ **Production Deployment Successful!**

            **Version:** v${{ github.run_number }}
            **Commit:** ${{ github.sha }}
            **Branch:** ${{ github.ref_name }}
            **Deployed at:** ${{ github.event.head_commit.timestamp }}

            ## Changes
            - Automated deployment from main branch
            - All tests passed ‚úÖ
            - Build successful ‚úÖ
          draft: false
          prerelease: false

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "Environment: ${{ needs.deploy-staging.result == 'success' && 'Staging' || needs.deploy-production.result == 'success' && 'Production' || 'Unknown' }}"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Please check the logs for more details."
